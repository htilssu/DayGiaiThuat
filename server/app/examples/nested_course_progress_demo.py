"""
Demo cho C√°ch 2: ORM + Response Schema d·∫°ng Nested

Minh h·ªça c√°ch s·ª≠ d·ª•ng NestedCourseProgressService ƒë·ªÉ query v√† tr·∫£ v·ªÅ
course v·ªõi topics, lessons v√† progress nested.
"""


def demo_nested_response_structure():
    """
    Demo c·∫•u tr√∫c response c·ªßa c√°ch 2
    """
    print("üéØ C√°ch 2: ORM + Response Schema d·∫°ng Nested")
    print("=" * 60)

    # ∆Øu ƒëi·ªÉm
    print("\n‚úÖ ∆Øu ƒëi·ªÉm:")
    print("‚Ä¢ Query t·∫•t c·∫£ topics v·ªõi lessons nested m·ªôt l·∫ßn")
    print("‚Ä¢ Query progress map ri√™ng bi·ªát")
    print("‚Ä¢ Map progress status b·∫±ng Python")
    print("‚Ä¢ Tr√°nh join ph·ª©c t·∫°p")
    print("‚Ä¢ Performance t·ªët v·ªõi kh√≥a h·ªçc nh·ªè/v·ª´a")
    print("‚Ä¢ Response nested ƒë·∫πp, d·ªÖ s·ª≠ d·ª•ng")

    # C√°ch ho·∫°t ƒë·ªông
    print("\nüîÑ C√°ch ho·∫°t ƒë·ªông:")
    print("1. Query UserCourse v·ªõi course info")
    print("2. Query t·∫•t c·∫£ topics v·ªõi lessons (eager loading)")
    print("3. Query progress map: lesson_id -> {status, last_viewed_at, completed_at}")
    print("4. Map progress status cho t·ª´ng lesson b·∫±ng Python")

    # Sample response
    print("\nüìã Sample Response:")
    sample_response = {
        "user_course_id": 1,
        "course_id": 101,
        "course_title": "React Fundamentals",
        "course_description": "Learn React from scratch",
        "topics": [
            {
                "id": 1,
                "name": "Introduction to React",
                "description": "Basic concepts and setup",
                "order": 1,
                "lessons": [
                    {
                        "id": 101,
                        "external_id": "1",
                        "title": "What is React?",
                        "description": "Overview of React framework",
                        "order": 1,
                        "status": "completed",
                        "last_viewed_at": "2025-07-14T10:30:00Z",
                        "completed_at": "2025-07-14T11:00:00Z",
                        "completion_percentage": 100.0,
                    },
                    {
                        "id": 102,
                        "external_id": "2",
                        "title": "Setting up Development Environment",
                        "description": "Install Node.js, npm, and create-react-app",
                        "order": 2,
                        "status": "in_progress",
                        "last_viewed_at": "2025-07-14T12:00:00Z",
                        "completed_at": None,
                        "completion_percentage": 50.0,
                    },
                    {
                        "id": 103,
                        "external_id": "3",
                        "title": "Your First Component",
                        "description": "Create and render your first React component",
                        "order": 3,
                        "status": "not_started",
                        "last_viewed_at": None,
                        "completed_at": None,
                        "completion_percentage": 0.0,
                    },
                ],
                "topic_completion_percentage": 50.0,  # 1/3 completed, 1/3 in progress
                "completed_lessons": 1,
                "total_lessons": 3,
            },
            {
                "id": 2,
                "name": "Components and Props",
                "description": "Deep dive into React components",
                "order": 2,
                "lessons": [
                    {
                        "id": 201,
                        "external_id": "4",
                        "title": "Function Components",
                        "description": "Creating components with functions",
                        "order": 1,
                        "status": "not_started",
                        "last_viewed_at": None,
                        "completed_at": None,
                        "completion_percentage": 0.0,
                    },
                    {
                        "id": 202,
                        "external_id": "5",
                        "title": "Props and Data Flow",
                        "description": "Passing data between components",
                        "order": 2,
                        "status": "not_started",
                        "last_viewed_at": None,
                        "completed_at": None,
                        "completion_percentage": 0.0,
                    },
                ],
                "topic_completion_percentage": 0.0,
                "completed_lessons": 0,
                "total_lessons": 2,
            },
        ],
        "total_topics": 2,
        "total_lessons": 5,
        "completed_lessons": 1,
        "in_progress_lessons": 1,
        "not_started_lessons": 3,
        "overall_completion_percentage": 20.0,  # 1/5 completed
        "current_topic_id": 1,
        "current_lesson_id": 102,
        "last_activity_at": "2025-07-14T12:00:00Z",
    }

    print(f"üìä Course: {sample_response['course_title']}")
    print(f"üìà Overall Progress: {sample_response['overall_completion_percentage']}%")
    print(f"üìö Topics: {sample_response['total_topics']}")
    print(f"üìñ Total Lessons: {sample_response['total_lessons']}")
    print(f"‚úÖ Completed: {sample_response['completed_lessons']}")
    print(f"üîÑ In Progress: {sample_response['in_progress_lessons']}")
    print(f"‚è∏Ô∏è  Not Started: {sample_response['not_started_lessons']}")

    # Detail breakdown
    print("\nüìã Topic Breakdown:")
    for topic in sample_response["topics"]:
        print(f"  üéØ {topic['name']} ({topic['topic_completion_percentage']}%)")
        for lesson in topic["lessons"]:
            status_emoji = {"completed": "‚úÖ", "in_progress": "üîÑ", "not_started": "‚è∏Ô∏è"}
            emoji = status_emoji.get(lesson["status"], "‚ùì")
            print(f"    {emoji} {lesson['title']} ({lesson['completion_percentage']}%)")


def demo_api_usage():
    """
    Demo c√°ch s·ª≠ d·ª•ng API endpoints
    """
    print("\nüöÄ API Usage Examples:")
    print("=" * 40)

    print("\n1Ô∏è‚É£ Get course with nested progress:")
    print("GET /nested/course/1")
    print("‚Üí Returns full course structure with progress")

    print("\n2Ô∏è‚É£ Get single topic with progress:")
    print("GET /nested/course/1/topic/1")
    print("‚Üí Returns one topic with lessons and progress")

    print("\n3Ô∏è‚É£ Get progress map only:")
    print("GET /nested/course/1/progress-map")
    print("‚Üí Returns lesson_id -> progress mapping")

    sample_progress_map = {
        "user_course_id": 1,
        "progress_map": {
            "101": {
                "status": "completed",
                "last_viewed_at": "2025-07-14T10:30:00Z",
                "completed_at": "2025-07-14T11:00:00Z",
                "completion_percentage": 100.0,
            },
            "102": {
                "status": "in_progress",
                "last_viewed_at": "2025-07-14T12:00:00Z",
                "completed_at": None,
                "completion_percentage": 50.0,
            },
            "103": {
                "status": "not_started",
                "last_viewed_at": None,
                "completed_at": None,
                "completion_percentage": 0.0,
            },
        },
        "summary": {
            "total_lessons": 3,
            "completed_lessons": 1,
            "in_progress_lessons": 1,
            "not_started_lessons": 1,
            "completion_percentage": 33.33,
        },
    }

    print("\nüìä Progress Map Response:")
    print(f"Total lessons: {sample_progress_map['summary']['total_lessons']}")
    print(f"Completion: {sample_progress_map['summary']['completion_percentage']}%")
    print("Progress mapping:")
    for lesson_id, progress in sample_progress_map["progress_map"].items():
        print(
            f"  Lesson {lesson_id}: {progress['status']} ({progress['completion_percentage']}%)"
        )


def demo_performance_considerations():
    """
    Demo c√°c c√¢n nh·∫Øc v·ªÅ performance
    """
    print("\n‚ö° Performance Considerations:")
    print("=" * 40)

    print("\n‚úÖ T·ªëi ∆∞u:")
    print("‚Ä¢ S·ª≠ d·ª•ng selectinload ƒë·ªÉ eager load lessons")
    print("‚Ä¢ Query progress map ri√™ng bi·ªát, tr√°nh N+1")
    print("‚Ä¢ Map progress b·∫±ng Python thay v√¨ SQL JOIN")
    print("‚Ä¢ C√≥ th·ªÉ cache progress map")
    print("‚Ä¢ Response nh·ªè g·ªçn, d·ªÖ serialize")

    print("\nüéØ Best for:")
    print("‚Ä¢ Kh√≥a h·ªçc nh·ªè/v·ª´a (< 100 lessons)")
    print("‚Ä¢ Frontend c·∫ßn structure nested")
    print("‚Ä¢ C·∫ßn hi·ªÉn th·ªã progress theo topic")
    print("‚Ä¢ Mu·ªën tr√°nh JOIN ph·ª©c t·∫°p")

    print("\n‚ö†Ô∏è  C√¢n nh·∫Øc:")
    print("‚Ä¢ V·ªõi kh√≥a h·ªçc l·ªõn, c√≥ th·ªÉ c·∫ßn pagination")
    print("‚Ä¢ Progress map c√≥ th·ªÉ l·ªõn v·ªõi nhi·ªÅu lesson")
    print("‚Ä¢ C·∫ßn optimize caching cho performance t·ªët h∆°n")


def demo_frontend_integration():
    """
    Demo c√°ch frontend c√≥ th·ªÉ s·ª≠ d·ª•ng
    """
    print("\nüé® Frontend Integration:")
    print("=" * 40)

    print("\nüì± React/Vue.js Example:")
    frontend_code = """
// Fetch course with nested progress
const response = await fetch('/nested/course/1');
const courseData = await response.json();

// Easy to render nested structure
courseData.topics.forEach(topic => {
  console.log(`Topic: ${topic.name} (${topic.topic_completion_percentage}%)`);
  
  topic.lessons.forEach(lesson => {
    console.log(`  Lesson: ${lesson.title} - ${lesson.status}`);
    
    // Update UI based on status
    if (lesson.status === 'completed') {
      showCheckmark(lesson.id);
    } else if (lesson.status === 'in_progress') {
      showProgressIndicator(lesson.id, lesson.completion_percentage);
    }
  });
});

// Overall progress
updateProgressBar(courseData.overall_completion_percentage);
showCurrentLesson(courseData.current_topic_id, courseData.current_lesson_id);
"""
    print(frontend_code)

    print("\nüéØ ∆Øu ƒëi·ªÉm cho Frontend:")
    print("‚Ä¢ Structure s·∫µn, kh√¥ng c·∫ßn map th√™m")
    print("‚Ä¢ Progress data ƒëi k√®m v·ªõi lesson info")
    print("‚Ä¢ D·ªÖ render UI nested (accordion, sidebar)")
    print("‚Ä¢ C√≥ summary stats ƒë·ªÉ hi·ªÉn th·ªã t·ªïng quan")


if __name__ == "__main__":
    print("üéØ Demo: C√°ch 2 - ORM + Response Schema d·∫°ng Nested")
    print("üöÄ Tri·ªÉn khai UserCourseProgress v·ªõi Nested Response")
    print("=" * 70)

    demo_nested_response_structure()
    demo_api_usage()
    demo_performance_considerations()
    demo_frontend_integration()

    print("\n" + "=" * 70)
    print("‚úÖ Demo completed! Check the router and service for implementation.")
    print("üìÇ Files created:")
    print("  ‚Ä¢ app/schemas/nested_course_progress_schema.py")
    print("  ‚Ä¢ app/services/nested_course_progress_service.py")
    print("  ‚Ä¢ app/routers/nested_course_progress_router.py")
    print("  ‚Ä¢ app/examples/nested_course_progress_demo.py")
    print("\nüîó Add router to main.py:")
    print("  from app.routers import nested_course_progress_router")
    print(
        "  app.include_router(nested_course_progress_router.router, prefix='/api/v1', tags=['Nested Course Progress'])"
    )
