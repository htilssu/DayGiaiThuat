"""
Script ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u cho ·ª©ng d·ª•ng.

C√°ch s·ª≠ d·ª•ng:
    python -m scripts.seed
"""

import json
import logging
import random
from datetime import datetime
from typing import List
from app.database.database import SessionLocal

from passlib.context import CryptContext
from app.models.badge_model import Badge
from app.models.course_model import Course
from app.models.exercise_model import Exercise
from app.models.topic_model import Topic
from app.models.test_model import Test
from app.models.user_model import User
from app.models.user_state_model import UserState

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Password context ƒë·ªÉ hash m·∫≠t kh·∫©u
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def create_topics() -> List[Topic]:
    """
    T·∫°o d·ªØ li·ªáu m·∫´u cho b·∫£ng topics

    Returns:
        List[Topic]: Danh s√°ch c√°c topic ƒë√£ t·∫°o
    """
    logger.info("T·∫°o d·ªØ li·ªáu m·∫´u cho Topics...")

    topics_data = [
        {
            "name": "C·∫•u tr√∫c d·ªØ li·ªáu",
            "description": "C√°c c·∫•u tr√∫c d·ªØ li·ªáu c∆° b·∫£n v√† n√¢ng cao",
        },
        {
            "name": "Thu·∫≠t to√°n s·∫Øp x·∫øp",
            "description": "C√°c thu·∫≠t to√°n s·∫Øp x·∫øp v√† ph√¢n t√≠ch ƒë·ªô ph·ª©c t·∫°p",
        },
        {
            "name": "Thu·∫≠t to√°n t√¨m ki·∫øm",
            "description": "C√°c thu·∫≠t to√°n t√¨m ki·∫øm v√† ·ª©ng d·ª•ng",
        },
        {
            "name": "Quy ho·∫°ch ƒë·ªông",
            "description": "Ph∆∞∆°ng ph√°p quy ho·∫°ch ƒë·ªông v√† c√°c b√†i to√°n kinh ƒëi·ªÉn",
        },
        {"name": "ƒê·ªì th·ªã", "description": "Thu·∫≠t to√°n tr√™n ƒë·ªì th·ªã v√† ·ª©ng d·ª•ng"},
    ]

    db = SessionLocal()
    topics = []

    try:
        for topic_data in topics_data:
            topic = Topic(**topic_data)
            db.add(topic)
            topics.append(topic)

        db.commit()
        for topic in topics:
            db.refresh(topic)

        logger.info(f"ƒê√£ t·∫°o {len(topics)} topics")
        return topics
    except Exception as e:
        db.rollback()
        logger.error(f"L·ªói khi t·∫°o topics: {str(e)}")
        return []
    finally:
        db.close()


def create_exercises(topics: List[Topic]) -> List[Exercise]:
    """
    T·∫°o d·ªØ li·ªáu m·∫´u cho b·∫£ng exercises

    Args:
        topics (List[Topic]): Danh s√°ch c√°c topic ƒë·ªÉ li√™n k·∫øt

    Returns:
        List[Exercise]: Danh s√°ch c√°c exercise ƒë√£ t·∫°o
    """
    logger.info("T·∫°o d·ªØ li·ªáu m·∫´u cho Exercises...")

    exercises_data = [
        {
            "name": "C√†i ƒë·∫∑t Stack v√† Queue",
            "description": "C√†i ƒë·∫∑t c·∫•u tr√∫c d·ªØ li·ªáu Stack v√† Queue s·ª≠ d·ª•ng m·∫£ng v√† danh s√°ch li√™n k·∫øt",
            "category": "Implementation",
            "difficulty": "Easy",
            "constraint": "Th·ªùi gian th·ª±c thi O(1) cho c√°c thao t√°c c∆° b·∫£n",
            "topic_id": 1,
        },
        {
            "name": "C√†i ƒë·∫∑t Heap",
            "description": "C√†i ƒë·∫∑t c·∫•u tr√∫c d·ªØ li·ªáu Heap v√† c√°c thao t√°c c∆° b·∫£n",
            "category": "Implementation",
            "difficulty": "Medium",
            "constraint": "Th·ªùi gian th·ª±c thi O(log n) cho c√°c thao t√°c c∆° b·∫£n",
            "topic_id": 1,
        },
        {
            "name": "Quicksort",
            "description": "C√†i ƒë·∫∑t thu·∫≠t to√°n Quicksort v√† ph√¢n t√≠ch ƒë·ªô ph·ª©c t·∫°p",
            "category": "Algorithm",
            "difficulty": "Medium",
            "constraint": "Th·ªùi gian th·ª±c thi trung b√¨nh O(n log n)",
            "topic_id": 2,
        },
        {
            "name": "Binary Search",
            "description": "C√†i ƒë·∫∑t thu·∫≠t to√°n Binary Search v√† c√°c bi·∫øn th·ªÉ",
            "category": "Algorithm",
            "difficulty": "Easy",
            "constraint": "Th·ªùi gian th·ª±c thi O(log n)",
            "topic_id": 3,
        },
        {
            "name": "B√†i to√°n Knapsack",
            "description": "Gi·∫£i quy·∫øt b√†i to√°n Knapsack b·∫±ng ph∆∞∆°ng ph√°p quy ho·∫°ch ƒë·ªông",
            "category": "Dynamic Programming",
            "difficulty": "Hard",
            "constraint": "Gi·ªõi h·∫°n b·ªô nh·ªõ v√† t·ªëi ∆∞u h√≥a kh√¥ng gian",
            "topic_id": 4,
        },
        {
            "name": "Thu·∫≠t to√°n Dijkstra",
            "description": "C√†i ƒë·∫∑t thu·∫≠t to√°n Dijkstra t√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t tr√™n ƒë·ªì th·ªã",
            "category": "Graph",
            "difficulty": "Medium",
            "constraint": "Th·ªùi gian th·ª±c thi O((V+E)logV)",
            "topic_id": 5,
        },
    ]

    db = SessionLocal()
    exercises = []

    try:
        for exercise_data in exercises_data:
            exercise = Exercise(**exercise_data)
            db.add(exercise)
            exercises.append(exercise)

        db.commit()
        for exercise in exercises:
            db.refresh(exercise)

        logger.info(f"ƒê√£ t·∫°o {len(exercises)} exercises")
        return exercises
    except Exception as e:
        db.rollback()
        logger.error(f"L·ªói khi t·∫°o exercises: {str(e)}")
        return []
    finally:
        db.close()


def create_tests(topics: List[Topic]) -> List[Test]:
    """
    T·∫°o d·ªØ li·ªáu m·∫´u cho b·∫£ng tests

    Args:
        topics (List[Topic]): Danh s√°ch c√°c topic ƒë·ªÉ li√™n k·∫øt

    Returns:
        List[Test]: Danh s√°ch c√°c test ƒë√£ t·∫°o
    """
    logger.info("T·∫°o d·ªØ li·ªáu m·∫´u cho Tests...")

    tests_data = [
        {"name": "Ki·ªÉm tra ki·∫øn th·ª©c c·∫•u tr√∫c d·ªØ li·ªáu", "topic_id": 1},
        {"name": "Ki·ªÉm tra thu·∫≠t to√°n s·∫Øp x·∫øp", "topic_id": 2},
        {"name": "Ki·ªÉm tra thu·∫≠t to√°n t√¨m ki·∫øm", "topic_id": 3},
        {"name": "Ki·ªÉm tra quy ho·∫°ch ƒë·ªông", "topic_id": 4},
        {"name": "Ki·ªÉm tra thu·∫≠t to√°n ƒë·ªì th·ªã", "topic_id": 5},
    ]

    db = SessionLocal()
    tests = []

    try:
        for test_data in tests_data:
            test = Test(**test_data)
            db.add(test)
            tests.append(test)

        db.commit()
        for test in tests:
            db.refresh(test)

        logger.info(f"ƒê√£ t·∫°o {len(tests)} tests")
        return tests
    except Exception as e:
        db.rollback()
        logger.error(f"L·ªói khi t·∫°o tests: {str(e)}")
        return []
    finally:
        db.close()


def create_badges() -> List[Badge]:
    """
    T·∫°o d·ªØ li·ªáu m·∫´u cho b·∫£ng badges

    Returns:
        List[Badge]: Danh s√°ch c√°c badge ƒë√£ t·∫°o
    """
    logger.info("T·∫°o d·ªØ li·ªáu m·∫´u cho Badges...")

    badges_data = [
        {
            "name": "Ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu",
            "icon": "üî∞",
            "description": "Ho√†n th√†nh ƒëƒÉng k√Ω v√† thi·∫øt l·∫≠p h·ªì s∆°",
            "category": "Th√†nh t·ª±u",
            "criteria": "ƒêƒÉng k√Ω t√†i kho·∫£n v√† ho√†n thi·ªán h·ªì s∆°",
            "points": 10,
            "rarity": "Ph·ªï bi·∫øn",
            "is_hidden": False,
        },
        {
            "name": "H·ªçc vi√™n chƒÉm ch·ªâ",
            "icon": "üìö",
            "description": "Ho√†n th√†nh 5 b√†i h·ªçc li√™n ti·∫øp",
            "category": "Ti·∫øn ƒë·ªô",
            "criteria": "Ho√†n th√†nh 5 b√†i h·ªçc li√™n ti·∫øp kh√¥ng b·ªè ng√†y n√†o",
            "points": 20,
            "rarity": "Ph·ªï bi·∫øn",
            "is_hidden": False,
        },
        {
            "name": "C√¢y b√∫t v√†ng",
            "icon": "‚úçÔ∏è",
            "description": "Vi·∫øt 10 b√†i th·∫£o lu·∫≠n c√≥ √≠ch",
            "category": "C·ªông ƒë·ªìng",
            "criteria": "Vi·∫øt 10 b√†i th·∫£o lu·∫≠n ƒë∆∞·ª£c ƒë√°nh gi√° cao",
            "points": 30,
            "rarity": "Hi·∫øm",
            "is_hidden": False,
        },
        {
            "name": "Nh√† gi·∫£i thu·∫≠t to√°n",
            "icon": "üß†",
            "description": "Gi·∫£i quy·∫øt 20 b√†i t·∫≠p thu·∫≠t to√°n",
            "category": "K·ªπ nƒÉng",
            "criteria": "Ho√†n th√†nh 20 b√†i t·∫≠p thu·∫≠t to√°n v·ªõi ƒëi·ªÉm s·ªë t·ªëi thi·ªÉu 80%",
            "points": 50,
            "rarity": "Hi·∫øm",
            "is_hidden": False,
        },
        {
            "name": "B·∫≠c th·∫ßy quy ho·∫°ch ƒë·ªông",
            "icon": "üèÜ",
            "description": "Gi·∫£i quy·∫øt t·∫•t c·∫£ c√°c b√†i t·∫≠p quy ho·∫°ch ƒë·ªông",
            "category": "K·ªπ nƒÉng",
            "criteria": "Ho√†n th√†nh t·∫•t c·∫£ b√†i t·∫≠p quy ho·∫°ch ƒë·ªông v·ªõi ƒëi·ªÉm s·ªë t·ªëi thi·ªÉu 90%",
            "points": 100,
            "rarity": "C·ª±c hi·∫øm",
            "is_hidden": False,
        },
    ]

    db = SessionLocal()
    badges = []

    try:
        for badge_data in badges_data:
            badge = Badge(**badge_data)
            db.add(badge)
            badges.append(badge)

        db.commit()
        for badge in badges:
            db.refresh(badge)

        logger.info(f"ƒê√£ t·∫°o {len(badges)} badges")
        return badges
    except Exception as e:
        db.rollback()
        logger.error(f"L·ªói khi t·∫°o badges: {str(e)}")
        return []
    finally:
        db.close()


def create_courses() -> List[Course]:
    """
    T·∫°o d·ªØ li·ªáu m·∫´u cho b·∫£ng courses

    Returns:
        List[Course]: Danh s√°ch c√°c course ƒë√£ t·∫°o
    """
    logger.info("T·∫°o d·ªØ li·ªáu m·∫´u cho Courses...")

    courses_data = [
        {
            "title": "Nh·∫≠p m√¥n C·∫•u tr√∫c d·ªØ li·ªáu v√† Gi·∫£i thu·∫≠t",
            "description": "Kh√≥a h·ªçc gi·ªõi thi·ªáu v·ªÅ c√°c c·∫•u tr√∫c d·ªØ li·ªáu v√† thu·∫≠t to√°n c∆° b·∫£n",
            "thumbnail_url": "https://example.com/thumbnails/dsa-intro.jpg",
            "level": "Beginner",
            "duration": 600,  # 10 gi·ªù
            "price": 0.0,  # Mi·ªÖn ph√≠
            "is_published": True,
            "tags": "algorithm,data structure,beginner",
            "requirements": json.dumps(
                [
                    "Ki·∫øn th·ª©c l·∫≠p tr√¨nh c∆° b·∫£n",
                    "Hi·ªÉu bi·∫øt v·ªÅ m·ªôt ng√¥n ng·ªØ l·∫≠p tr√¨nh (Python, Java, C++)",
                ]
            ),
            "what_you_will_learn": json.dumps(
                [
                    "Hi·ªÉu v·ªÅ c√°c c·∫•u tr√∫c d·ªØ li·ªáu c∆° b·∫£n",
                    "Ph√¢n t√≠ch ƒë·ªô ph·ª©c t·∫°p thu·∫≠t to√°n",
                    "C√†i ƒë·∫∑t c√°c thu·∫≠t to√°n s·∫Øp x·∫øp v√† t√¨m ki·∫øm",
                    "Gi·∫£i quy·∫øt c√°c b√†i to√°n c∆° b·∫£n",
                ]
            ),
            "learning_path": json.dumps(
                {
                    "units": [
                        {
                            "id": 1,
                            "title": "Gi·ªõi thi·ªáu",
                            "lessons": [
                                {"id": 1, "title": "T·ªïng quan v·ªÅ DSA", "duration": 15},
                                {
                                    "id": 2,
                                    "title": "Ph√¢n t√≠ch ƒë·ªô ph·ª©c t·∫°p",
                                    "duration": 20,
                                },
                            ],
                        },
                        {
                            "id": 2,
                            "title": "C·∫•u tr√∫c d·ªØ li·ªáu c∆° b·∫£n",
                            "lessons": [
                                {
                                    "id": 3,
                                    "title": "Array v√† Linked List",
                                    "duration": 30,
                                },
                                {"id": 4, "title": "Stack v√† Queue", "duration": 25},
                            ],
                        },
                    ]
                }
            ),
        },
        {
            "title": "Thu·∫≠t to√°n n√¢ng cao",
            "description": "Kh√≥a h·ªçc ƒëi s√¢u v√†o c√°c thu·∫≠t to√°n n√¢ng cao v√† k·ªπ thu·∫≠t gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ",
            "thumbnail_url": "https://example.com/thumbnails/advanced-algo.jpg",
            "level": "Advanced",
            "duration": 900,  # 15 gi·ªù
            "price": 49.99,
            "is_published": True,
            "tags": "algorithm,advanced,optimization",
            "requirements": json.dumps(
                [
                    "Ki·∫øn th·ª©c v·ªØng v·ªÅ c·∫•u tr√∫c d·ªØ li·ªáu c∆° b·∫£n",
                    "Hi·ªÉu bi·∫øt v·ªÅ ƒë·ªô ph·ª©c t·∫°p thu·∫≠t to√°n",
                    "Kinh nghi·ªám l·∫≠p tr√¨nh t·ªëi thi·ªÉu 1 nƒÉm",
                ]
            ),
            "what_you_will_learn": json.dumps(
                [
                    "Thu·∫≠t to√°n quy ho·∫°ch ƒë·ªông n√¢ng cao",
                    "Thu·∫≠t to√°n tham lam v√† ·ª©ng d·ª•ng",
                    "C√°c thu·∫≠t to√°n tr√™n ƒë·ªì th·ªã",
                    "K·ªπ thu·∫≠t t·ªëi ∆∞u h√≥a thu·∫≠t to√°n",
                ]
            ),
            "learning_path": json.dumps(
                {
                    "units": [
                        {
                            "id": 1,
                            "title": "Quy ho·∫°ch ƒë·ªông n√¢ng cao",
                            "lessons": [
                                {
                                    "id": 1,
                                    "title": "B√†i to√°n d√£y con tƒÉng d√†i nh·∫•t",
                                    "duration": 40,
                                },
                                {
                                    "id": 2,
                                    "title": "B√†i to√°n c·∫Øt thanh",
                                    "duration": 35,
                                },
                            ],
                        },
                        {
                            "id": 2,
                            "title": "Thu·∫≠t to√°n ƒë·ªì th·ªã",
                            "lessons": [
                                {
                                    "id": 3,
                                    "title": "Thu·∫≠t to√°n Dijkstra",
                                    "duration": 45,
                                },
                                {
                                    "id": 4,
                                    "title": "Thu·∫≠t to√°n Bellman-Ford",
                                    "duration": 50,
                                },
                            ],
                        },
                    ]
                }
            ),
        },
        {
            "title": "Chu·∫©n b·ªã ph·ªèng v·∫•n k·ªπ thu·∫≠t",
            "description": "Kh√≥a h·ªçc gi√∫p b·∫°n chu·∫©n b·ªã cho c√°c cu·ªôc ph·ªèng v·∫•n k·ªπ thu·∫≠t t·∫°i c√°c c√¥ng ty c√¥ng ngh·ªá l·ªõn",
            "thumbnail_url": "https://example.com/thumbnails/interview-prep.jpg",
            "level": "Intermediate",
            "duration": 720,  # 12 gi·ªù
            "price": 29.99,
            "is_published": True,
            "tags": "interview,coding,problem-solving",
            "requirements": json.dumps(
                [
                    "Ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ c·∫•u tr√∫c d·ªØ li·ªáu v√† thu·∫≠t to√°n",
                    "K·ªπ nƒÉng l·∫≠p tr√¨nh th√†nh th·∫°o m·ªôt ng√¥n ng·ªØ",
                ]
            ),
            "what_you_will_learn": json.dumps(
                [
                    "Gi·∫£i quy·∫øt c√°c b√†i to√°n ph·ªèng v·∫•n ph·ªï bi·∫øn",
                    "K·ªπ thu·∫≠t t·ªëi ∆∞u h√≥a gi·∫£i ph√°p",
                    "C√°ch tr√¨nh b√†y √Ω t∆∞·ªüng r√µ r√†ng",
                    "Chi·∫øn l∆∞·ª£c ph·ªèng v·∫•n hi·ªáu qu·∫£",
                ]
            ),
            "learning_path": json.dumps(
                {
                    "units": [
                        {
                            "id": 1,
                            "title": "Chu·∫©n b·ªã c∆° b·∫£n",
                            "lessons": [
                                {
                                    "id": 1,
                                    "title": "Quy tr√¨nh ph·ªèng v·∫•n",
                                    "duration": 20,
                                },
                                {
                                    "id": 2,
                                    "title": "Ph∆∞∆°ng ph√°p gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ",
                                    "duration": 30,
                                },
                            ],
                        },
                        {
                            "id": 2,
                            "title": "B√†i t·∫≠p ph·ªèng v·∫•n",
                            "lessons": [
                                {
                                    "id": 3,
                                    "title": "B√†i t·∫≠p v·ªÅ m·∫£ng v√† chu·ªói",
                                    "duration": 40,
                                },
                                {
                                    "id": 4,
                                    "title": "B√†i t·∫≠p v·ªÅ c√¢y v√† ƒë·ªì th·ªã",
                                    "duration": 45,
                                },
                            ],
                        },
                    ]
                }
            ),
        },
    ]

    db = SessionLocal()
    courses = []

    try:
        for course_data in courses_data:
            course = Course(**course_data)
            db.add(course)
            courses.append(course)

        db.commit()
        for course in courses:
            db.refresh(course)

        logger.info(f"ƒê√£ t·∫°o {len(courses)} courses")
        return courses
    except Exception as e:
        db.rollback()
        logger.error(f"L·ªói khi t·∫°o courses: {str(e)}")
        return []
    finally:
        db.close()


def create_users(badges: List[Badge], courses: List[Course]) -> List[User]:
    """
    T·∫°o d·ªØ li·ªáu m·∫´u cho b·∫£ng users v√† c√°c b·∫£ng li√™n quan

    Args:
        badges (List[Badge]): Danh s√°ch badges ƒë·ªÉ g√°n cho users
        courses (List[Course]): Danh s√°ch courses ƒë·ªÉ t·∫°o learning_progress

    Returns:
        List[User]: Danh s√°ch c√°c user ƒë√£ t·∫°o
    """
    logger.info("T·∫°o d·ªØ li·ªáu m·∫´u cho Users...")

    users_data = [
        {
            "email": "admin@example.com",
            "username": "admin",
            "hashed_password": pwd_context.hash("admin123"),
            "first_name": "Admin",
            "last_name": "User",
            "bio": "Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng",
            "avatar": "https://example.com/avatars/admin.jpg",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "hashed_password": pwd_context.hash("user123"),
            "first_name": "Nguy·ªÖn",
            "last_name": "VƒÉn A",
            "bio": "Sinh vi√™n nƒÉm nh·∫•t ng√†nh Khoa h·ªçc m√°y t√≠nh",
            "avatar": "https://example.com/avatars/user1.jpg",
        },
        {
            "email": "user2@example.com",
            "username": "user2",
            "hashed_password": pwd_context.hash("user123"),
            "first_name": "Tr·∫ßn",
            "last_name": "Th·ªã B",
            "bio": "K·ªπ s∆∞ ph·∫ßn m·ªÅm v·ªõi 2 nƒÉm kinh nghi·ªám",
            "avatar": "https://example.com/avatars/user2.jpg",
        },
    ]

    db = SessionLocal()
    users = []

    try:
        # T·∫°o users
        for user_data in users_data:
            user = User(**user_data)
            db.add(user)
            db.flush()  # ƒê·ªÉ l·∫•y ID c·ªßa user m·ªõi t·∫°o

            # T·∫°o user_state cho m·ªói user
            user_state = UserState(
                user_id=user.id,
                last_active=datetime.now(),
                streak_count=random.randint(1, 30),
                total_points=random.randint(100, 1000),
                level=random.randint(1, 10),
                daily_goal=30,
                daily_progress=random.randint(0, 30),
                completed_exercises=random.randint(0, 20),
                completed_courses=random.randint(0, 3),
                problems_solved=random.randint(0, 50),
                algorithms_progress=random.randint(0, 100),
                data_structures_progress=random.randint(0, 100),
                dynamic_programming_progress=random.randint(0, 100),
            )
            db.add(user_state)

            users.append(user)

        db.commit()
        for user in users:
            db.refresh(user)

        logger.info(f"ƒê√£ t·∫°o {len(users)} users v√† d·ªØ li·ªáu li√™n quan")
        return users
    except Exception as e:
        db.rollback()
        logger.error(f"L·ªói khi t·∫°o users: {str(e)}")
        return []
    finally:
        db.close()


def seed_all():
    """
    T·∫°o t·∫•t c·∫£ d·ªØ li·ªáu m·∫´u cho ·ª©ng d·ª•ng
    """
    logger.info("B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u...")

    # T·∫°o d·ªØ li·ªáu theo th·ª© t·ª± ph√π h·ª£p ƒë·ªÉ tr√°nh l·ªói kh√≥a ngo·∫°i
    topics = create_topics()
    if not topics:
        logger.error("Kh√¥ng th·ªÉ t·∫°o topics, d·ª´ng qu√° tr√¨nh seed")
        return

    badges = create_badges()
    courses = create_courses()

    # T·∫°o d·ªØ li·ªáu li√™n quan
    create_exercises(topics)
    create_tests(topics)
    create_users(badges, courses)

    logger.info("Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u!")


if __name__ == "__main__":
    seed_all()
