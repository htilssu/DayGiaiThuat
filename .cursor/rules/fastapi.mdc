---
description: 
globs: 
alwaysApply: true
---
TITLE: Importing Routers: Relative Import (Balanced)
DESCRIPTION: Demonstrates importing routers using a relative path within the application's package structure. This is the preferred method for 'balanced imports' in Python packages.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_10

LANGUAGE: Python
CODE:
```
from .routers import items, users
```
# 
in backend alwat get snake key because i have an middware to convert camelCase from request to snake_key

----------------------------------------

TITLE: Importing Routers: Absolute Import (Explicit)
DESCRIPTION: Shows an alternative method for importing routers using an absolute path from the application's root. This is referred to as 'explicit import' and is also a valid way to import modules.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_11

LANGUAGE: Python
CODE:
```
from app.routers import items, users
```

----------------------------------------

TITLE: Avoiding Name Collisions with APIRouter Imports
DESCRIPTION: Illustrates a common issue where importing multiple routers that expose a variable with the same name (e.g., 'router') can lead to conflicts, as the latter import overwrites the former. This snippet shows the problematic import pattern that causes the collision.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_12

LANGUAGE: Python
CODE:
```
from .routers.items import router
from .routers.users import router
```
----------------------------------------

TITLE: Include APIRouters for users and items in main app
DESCRIPTION: Shows how to include APIRouters from 'users' and 'items' submodules into the main FastAPI application using `app.include_router()`. This integrates all routes from the included routers into the main application's API.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_17

LANGUAGE: Python
CODE:
```
app.include_router(users.router)
app.include_router(items.router)
```

----------------------------------------

TITLE: Adding Callback Router to FastAPI Path Operation
DESCRIPTION: This code demonstrates how to integrate the callback router into a FastAPI path operation using the `callbacks` parameter. It passes the `.routes` attribute of the callback router to the main API endpoint, enabling documentation of the external API's expected behavior.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/advanced/openapi-callbacks.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.post("/invoices/", callbacks=invoices_callback_router.routes)
async def create_invoice(invoice: Invoice):
    return {"message": f"Invoice created for {invoice.customer}"}
```

----------------------------------------

TITLE: Define a simple APIRouter for internal admin operations
DESCRIPTION: Illustrates a basic APIRouter definition in a separate file (e.g., `app/internal/admin.py`) that can be shared across multiple projects. This router contains simple path operations without any custom prefixes or dependencies defined within itself.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_18

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()

@router.post("/admin/")
async def create_admin_item(item: dict):
    return {"message": "Admin item created", "item": item}

@router.get("/admin/legacy")
async def read_legacy_admin():
    return {"message": "Legacy Admin"}
```

----------------------------------------


TITLE: Example Path Operation with APIRouter Prefix
DESCRIPTION: Illustrates a path operation defined within an APIRouter. When the router has a prefix (e.g., /items), the path defined here (/{item_id}) combines with the prefix to form the full endpoint path (e.g., /items/{item_id}).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_7

LANGUAGE: Python
CODE:
```
@router.get("/{item_id}")
async def read_item(item_id: str):
    ...
```

----------------------------------------

TITLE: FastAPI Main Application: Global Dependencies and Router Inclusion
DESCRIPTION: Illustrates the main FastAPI application file (app/main.py), demonstrating how to initialize the FastAPI instance with global dependencies and include APIRouter instances from other modules. This centralizes application setup and routing.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_13

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends
from .routers import items, users # Relative import for routers

# Dummy global dependency for demonstration
async def get_query_token(token: str = Depends(lambda: "default_token")):
    return token

# Initialize FastAPI app with global dependencies
app = FastAPI(dependencies=[Depends(get_query_token)])

# Include routers from submodules
app.include_router(items.router)
app.include_router(users.router)

@app.get("/")
async def read_root():
    return {"message": "Welcome to the main app!"}
```

----------------------------------------

TITLE: Adding Callback Router to API Route
DESCRIPTION: This code snippet shows how to add the callback router's routes to the main API route using the `callbacks` parameter. It passes the `.routes` attribute of the callback router to the `callbacks` parameter of the API route decorator.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/openapi-callbacks.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.post("/invoices", callbacks=invoices_callback_router.routes)
```

----------------------------------------

TITLE: Relative Import for Dependencies in FastAPI Router
DESCRIPTION: This snippet demonstrates a relative import using '..' to access modules in a parent directory. Specifically, it imports 'get_token_header' from 'app.dependencies' into 'app.routers.items', which is crucial for structuring larger applications with shared dependencies across different router modules.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_6

LANGUAGE: Python
CODE:
```
from ..dependencies import get_token_header
```

----------------------------------------

TITLE: Adding Callback Router to Path Operation
DESCRIPTION: Demonstrates how to add the callback router's routes to the main API's path operation using the callbacks parameter. This integrates the callback documentation into the main API documentation, showing how the external API should look.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/openapi-callbacks.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.post("/invoices", callbacks=[invoices_callback_router.routes])
async def process_invoice(invoice: Invoice):
    return {"message": "Invoice processing started"}
```

----------------------------------------

TITLE: Import APIRouter Instances into Main FastAPI Application
DESCRIPTION: This snippet demonstrates how to import APIRouter instances from separate modules (e.g., app.routers.users and app.routers.items) into the main FastAPI application. It uses relative imports to access these modules and then includes their routers using app.include_router(), effectively combining all defined routes under the main application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_9

LANGUAGE: Python
CODE:
```
from .routers import items, users
```

----------------------------------------

TITLE: Nesting APIRouters within Another APIRouter
DESCRIPTION: Demonstrates how to include one APIRouter within another APIRouter. This allows for hierarchical organization of routes, where child routers' path operations are integrated into a parent router before the parent is included in the main FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_14

LANGUAGE: Python
CODE:
```
router.include_router(other_router)
```

----------------------------------------

TITLE: Initialize FastAPI APIRouter for Modular Endpoints
DESCRIPTION: This Python snippet demonstrates how to import `APIRouter` from `fastapi` and create an instance. This `router` object will be used to group related path operations, allowing for better organization of API endpoints within a dedicated module like `app/routers/users.py`.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()
```

----------------------------------------

TITLE: Importing Shared Dependencies in APIRouter Module
DESCRIPTION: Demonstrates how to import a shared dependency function (e.g., get_x_token) from a separate dependencies module into an APIRouter module using a relative import. This allows the dependency to be reused across different routers or path operations.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends, HTTPException, status

from app.dependencies import get_x_token

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_x_token)],
    responses={404: {"description": "Not found"}}
)


@router.get("/")
async def read_items():
    return [{"item_id": "Foo", "owner": "Alice"}, {"item_id": "Bar", "owner": "Bob"}]


@router.get("/{item_id}")
async def read_item(item_id: str):
    return {"item_id": item_id, "owner": "Alice"}
```

----------------------------------------

TITLE: Configuring APIRouter with Common Parameters
DESCRIPTION: This snippet demonstrates how to use FastAPI's APIRouter to group related path operations and apply common configurations like path prefixes, tags, extra responses, and dependencies. This reduces code duplication and organizes API endpoints efficiently. The X-Token dependency is applied to all paths within this router.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends, HTTPException, status

from app.dependencies import get_x_token

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_x_token)],
    responses={404: {"description": "Not found"}}
)


@router.get("/")
async def read_items():
    return [{"item_id": "Foo", "owner": "Alice"}, {"item_id": "Bar", "owner": "Bob"}]


@router.get("/{item_id}")
async def read_item(item_id: str):
    return {"item_id": item_id, "owner": "Alice"}
```

----------------------------------------

TITLE: Nesting APIRouters in FastAPI
DESCRIPTION: Illustrates how to include one APIRouter within another APIRouter using `router.include_router(other_router)`. This method allows for hierarchical organization of API endpoints. It is important to perform this inclusion before the parent router is added to the main FastAPI application to ensure all nested path operations are registered correctly.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_22

LANGUAGE: Python
CODE:
```
router.include_router(other_router)
```

----------------------------------------

TITLE: Define APIRouter with Common Configuration in FastAPI
DESCRIPTION: This snippet demonstrates how to initialize an APIRouter instance with shared configurations such as a prefix for all routes, tags for OpenAPI documentation, default responses, and dependencies that apply to all path operations defined within this router. This reduces code duplication and centralizes common settings for a group of related endpoints.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends, HTTPException, status

from ..dependencies import get_token_header

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token_header)],
    responses={404: {"description": "Not found"}},
)

@router.get("/")
async def read_items():
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]

@router.get("/{item_id}")
async def read_item(item_id: str):
    return {"item_id": item_id}

@router.get("/{item_id}/custom", tags=["custom"], responses={403: {"description": "Operation forbidden"}})
async def read_custom_item(item_id: str):
    return {"item_id": item_id, "message": "This is a custom item"}
```

----------------------------------------

TITLE: Include APIRouter with custom prefix, tags, dependencies, and responses
DESCRIPTION: Demonstrates how to include an existing APIRouter (e.g., from an internal admin module) into the main FastAPI application while applying custom configurations. This includes setting a URL prefix, adding tags for documentation, enforcing dependencies, and defining custom responses, all without modifying the original router file.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_19

LANGUAGE: Python
CODE:
```
app.include_router(
    admin.router,
    prefix="/admin",
    tags=["admin"],
    dependencies=[Depends(get_token_header)],
    responses={418: {"description": "I'm a teapot"}}
)
```

----------------------------------------

TITLE: Defining Path Operations with FastAPI APIRouter
DESCRIPTION: This snippet demonstrates how to define path operations using an `APIRouter` instance, similar to how `FastAPI` is used. It includes example GET requests for listing users, getting a specific user, and getting a user's items, showcasing how to organize related endpoints within a dedicated router.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_4

LANGUAGE: Python
CODE:
```
@router.get("/users/", tags=["users"])
async def read_users():
    return [{"username": "Rick"}, {"username": "Morty"}]


@router.get("/users/me", tags=["users"])
async def read_user_me():
    return {"username": "current user"}


@router.get("/users/{username}", tags=["users"])
async def read_user(username: str):
    return {"username": username}
```

----------------------------------------

TITLE: Create APIRouter for Callback Documentation
DESCRIPTION: Creates an APIRouter instance to hold the routes used for documenting the callback API. This router will be used to define the structure and expected behavior of the external API that will receive callbacks.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/openapi-callbacks.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import APIRouter, FastAPI, Query
from pydantic import BaseModel, Url


class Invoice(BaseModel):
    id: int
    title: Optional[str] = None
    customer: str
    total: float

invoices_callback_router = APIRouter()
```

----------------------------------------

TITLE: Applying Custom APIRoute Class to FastAPI Router
DESCRIPTION: This Python snippet demonstrates how to apply a custom `APIRoute` class, such as `TimedRoute`, to an entire `APIRouter`. By setting the `route_class` parameter during `APIRouter` initialization, all path operations defined within this router will automatically use the specified custom route class, inheriting its modified behavior (e.g., adding response timing headers).
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#_snippet_4

LANGUAGE: Python
CODE:
```
router = APIRouter(route_class=TimedRoute)
```

----------------------------------------

TITLE: Add a path operation directly to the FastAPI application
DESCRIPTION: Shows that individual path operations can still be defined directly on the main FastAPI application instance, even when using APIRouters for modularity. This allows for flexible route management alongside included routers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_20

LANGUAGE: Python
CODE:
```
@app.get("/")
async def root():
    return {"message": "Hello Bigger Applications!"}
```

----------------------------------------

TITLE: FastAPI App with Callback URL Parameter
DESCRIPTION: Defines a FastAPI application with a route that accepts an Invoice and a callback URL. It includes a Pydantic model for the Invoice and integrates a router for callback documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/openapi-callbacks.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import APIRouter, FastAPI, Query
from pydantic import BaseModel, Url


class Invoice(BaseModel):
    id: int
    title: Optional[str] = None
    customer: str
    total: float

invoices_callback_router = APIRouter()


@invoices_callback_router.post("/invoices/{invoice_id}/events", tags=["callback"])
async def invoice_callback(
    invoice_id: int,
    description: str,
    paid: bool,
):
    return {"invoice_id": invoice_id, "description": description, "paid": paid}


app = FastAPI()


@app.post("/invoices")
async def create_invoice(
    invoice: Invoice,
    callback_url: Url,
    background_tasks: BackgroundTasks,
    # Here you could pass a custom parameter for the external API
    # x_custom_header: str = Header(None),
    # And then pass it to the background task
    # background_tasks.add_task(send_invoice, invoice, callback_url, x_custom_header=x_custom_header)
):
    return {"invoice": invoice, "callback_url": callback_url}


# Here you pass the routes to the callbacks parameter
# That way, FastAPI knows that those routes are part of the OpenAPI
# definition for callbacks
@app.post("/invoices", callbacks=invoices_callback_router.routes)
async def create_invoice(
    invoice: Invoice,
    callback_url: Url = Query(..., description="URL to send the callback to"),
):
    return {"invoice": invoice, "callback_url": callback_url}
```

----------------------------------------

TITLE: Initializing FastAPI APIRouter for Callbacks
DESCRIPTION: This snippet initializes an `APIRouter` instance specifically for defining and documenting OpenAPI callbacks. This router will contain the path operations that describe the external API expected by your service for callback notifications.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, FastAPI, status

invoices_callback_router = APIRouter()
```

----------------------------------------

TITLE: Configuring Traefik Entry Points and Providers (TOML)
DESCRIPTION: This TOML configuration defines Traefik's entry point for HTTP traffic on port 9999 and specifies that routes will be loaded from `routes.toml`. It sets up the basic listener and file provider for dynamic configuration.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_6

LANGUAGE: TOML
CODE:
```
[entryPoints]
  [entryPoints.http]
    address = ":9999"

[providers]
  [providers.file]
    filename = "routes.toml"
```

----------------------------------------

TITLE: Initializing Callback APIRouter in FastAPI
DESCRIPTION: This code snippet demonstrates how to create a new APIRouter instance that will contain callback routes. This router is later used to define the structure and expected behavior of external APIs that will interact with your FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/advanced/openapi-callbacks.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import APIRouter, FastAPI
from pydantic import BaseModel


invoices_callback_router = APIRouter()
```

----------------------------------------

TITLE: Traefik Configuration (traefik.toml)
DESCRIPTION: This TOML file configures Traefik to listen on port 9999 and use `routes.toml` for routing configurations. It defines the entry point for HTTP traffic and specifies the file provider.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/de/docs/advanced/behind-a-proxy.md#_snippet_5

LANGUAGE: TOML
CODE:
```
[entryPoints]
  [entryPoints.http]
    address = ":9999"

[providers]
  [providers.file]
    filename = "routes.toml"
```

----------------------------------------

TITLE: Configuring Traefik Entry Point and Providers (TOML)
DESCRIPTION: This TOML configuration file sets up Traefik to listen for HTTP requests on port 9999 and specifies that it should load additional routing configurations from `routes.toml`. This allows Traefik to act as a reverse proxy, forwarding requests to the FastAPI application.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#_snippet_6

LANGUAGE: TOML
CODE:
```
[entryPoints]
  [entryPoints.http]
    address = ":9999"

[providers]
  [providers.file]
    filename = "routes.toml"
```

----------------------------------------

TITLE: Creating an Invoice with Callback URL in FastAPI
DESCRIPTION: This snippet defines a FastAPI path operation to create an invoice. It accepts an `Invoice` body and a `callback_url` query parameter of type `Url`. The `callbacks` argument in the decorator links this operation to a router for documenting the callback.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import APIRouter, FastAPI, status
from pydantic import Url

@app.post("/invoices/", status_code=status.HTTP_202_ACCEPTED, callbacks=invoices_callback_router.routes)
async def create_invoice(invoice: Invoice, callback_url: Url):
    """
    Create an invoice and notify the client later.
    """
    # Send the invoice to the client
    # Collect the money
    # Notify the client later
    return {"msg": "Invoice received!"}
```

----------------------------------------

TITLE: Traefik Configuration File
DESCRIPTION: Configures Traefik to listen on port 9999 and use routes defined in routes.toml.  This TOML file sets up the entry point for HTTP traffic and specifies the file containing routing rules.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/es/docs/advanced/behind-a-proxy.md#_snippet_4

LANGUAGE: TOML
CODE:
```
[entryPoints]
  [entryPoints.http]
    address = ":9999"

[providers]
  [providers.file]
    filename = "routes.toml"
```

----------------------------------------

TITLE: Applying a Custom Route Class to an APIRouter in FastAPI
DESCRIPTION: This line demonstrates how to apply a custom `APIRoute` class (e.g., `TimedRoute`) to an `APIRouter` instance. By setting the `route_class` parameter, all path operations defined under this router will automatically use the specified custom route class, allowing for centralized custom logic like adding response headers or modifying request handling.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#_snippet_3

LANGUAGE: Python
CODE:
```
router = APIRouter(route_class=TimedRoute)
```

----------------------------------------

TITLE: Traefik Configuration File
DESCRIPTION: Configures Traefik to listen on port 9999 and use routes defined in routes.toml. This setup is for local testing and avoids needing administrator privileges.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_4

LANGUAGE: TOML
CODE:
```
[entryPoints]
  [entryPoints.http]
    address = ":9999"

[providers]
  [providers.file]
    filename = "routes.toml"
```

----------------------------------------

TITLE: Attaching Callback Router to FastAPI Path Operation
DESCRIPTION: This snippet demonstrates how to integrate the previously defined `APIRouter` containing callback path operations into your main FastAPI application. By passing `invoices_callback_router.routes` to the `callbacks` parameter of a path operation decorator, FastAPI automatically generates the corresponding OpenAPI documentation for the callbacks.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#_snippet_9

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, APIRouter, Body
from pydantic import BaseModel

# Assume 'invoices_callback_router' is an APIRouter instance
# with defined callback path operations, and models are defined.

class InvoiceEvent(BaseModel):
    id: str
    customer: str
    total: str

class InvoiceEventReceived(BaseModel):
    ok: bool

invoices_callback_router = APIRouter()
@invoices_callback_router.post(
    "/invoices/{invoice_id}",
    response_model=InvoiceEventReceived,
)
def invoice_event_callback(invoice_id: str, body: InvoiceEvent):
    pass

app = FastAPI()

@app.post(
    "/invoices/",
    callbacks=invoices_callback_router.routes,
    response_model=InvoiceEventReceived # Example response model for the main endpoint
)
def create_invoice(callback_url: str, body: InvoiceEvent):
    """
    Create an invoice and register a callback for payment events.
    """
    # Your application logic to process the invoice and eventually send the callback
    return {"ok": True}
```

----------------------------------------

TITLE: Defining a GET Endpoint in FastAPI
DESCRIPTION: This FastAPI snippet illustrates how to define a server-side GET endpoint. The `@app.get("/some/url")` decorator maps the `read_url` function to handle GET requests for the `/some/url` path, returning a JSON object as the response. This showcases FastAPI's declarative routing.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Example FastAPI Application File Structure
DESCRIPTION: This snippet illustrates a typical file and directory structure for a larger FastAPI application, organizing modules into packages and subpackages like `app`, `routers`, and `internal`. The `__init__.py` files define Python packages, enabling modular imports.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#_snippet_0

LANGUAGE: text
CODE:
```
.
├── app                  # "app" is a Python package
│   ├── __init__.py      # this file makes "app" a "Python package"
│   ├── main.py          # "main" module, e.g. import app.main
│   ├── dependencies.py  # "dependencies" module, e.g. import app.dependencies
│   └── routers          # "routers" is a "Python subpackage"
│   │   ├── __init__.py  # makes "routers" a "Python subpackage"
│   │   ├── items.py     # "items" submodule, e.g. import app.routers.items
│   │   └── users.py     # "users" submodule, e.g. import app.routers.users
│   └── internal         # "internal" is a "Python subpackage"
│       ├── __init__.py  # makes "internal" a "Python subpackage"
│       └── admin.py     # "admin" submodule, e.g. import app.internal.admin
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This Python code defines a simple FastAPI application with two routes: a root route ('/') that returns a greeting and an '/items/{item_id}' route that returns an item ID and an optional query parameter. It showcases the basic structure of a FastAPI application using synchronous functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: FastAPI APIRouter: Custom Tags and Responses
DESCRIPTION: Shows how to define an APIRouter in FastAPI and apply additional tags and responses to individual path operations. These settings combine with any router-level configurations, providing granular control over API documentation.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_12

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends, HTTPException, status

# Assume get_token_header is defined elsewhere, e.g., in app/dependencies.py
async def get_token_header():
    # This is a placeholder for a real dependency
    pass

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token_header)],
    responses={404: {"description": "Not found"}},
)

@router.get("/")
async def read_items():
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]

@router.get("/{item_id}",
            tags=["custom"], # Additional tag for this specific path operation
            responses={403: {"description": "Operation forbidden"}}) # Additional response
async def read_item(item_id: str):
    if item_id == "forbidden":
        raise HTTPException(status_code=403, detail="Forbidden item")
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Starting Traefik with Configuration File (Console)
DESCRIPTION: This console command starts the Traefik proxy using the `traefik.toml` configuration file. It loads the defined entry points, providers, and routes, making Traefik ready to handle incoming requests.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_8

LANGUAGE: console
CODE:
```
./traefik --configFile=traefik.toml

INFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml
```

----------------------------------------

TITLE: Defining a Data Model and PUT Route with Pydantic
DESCRIPTION: This code extends the FastAPI application to include a PUT route ('/items/{item_id}') that accepts a JSON body. It defines a Pydantic model (`Item`) to represent the expected data structure, enabling automatic data validation and serialization. The `update_item` function demonstrates how to access the validated data from the request body.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/az/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Upgrading FastAPI with Pydantic Model and PUT Request
DESCRIPTION: This snippet extends the FastAPI application by introducing a Pydantic `BaseModel` to define the structure of a request body. It adds a `PUT` endpoint that accepts an `item_id` path parameter and an `Item` object as a request body, demonstrating how to handle structured input.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Create Basic FastAPI Application (Synchronous)
DESCRIPTION: Defines a simple FastAPI application with a root endpoint and an item endpoint, using standard `def` functions for route handlers. This setup handles basic GET requests and demonstrates path and optional query parameters.
SOURCE: https://github.com/fastapi/fastapi/blob/master/README.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application with async def
DESCRIPTION: This Python code defines a simple FastAPI application with two routes: a root route ('/') that returns a greeting and an '/items/{item_id}' route that returns an item ID and an optional query parameter. It showcases the basic structure of a FastAPI application using asynchronous functions.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/uk/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This code snippet demonstrates how to create a basic FastAPI application with two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint includes a path parameter 'item_id' and an optional query parameter 'q'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Example FastAPI Application File Structure
DESCRIPTION: This snippet illustrates a typical directory and file organization for a larger FastAPI application, demonstrating how Python packages and modules are structured. It includes `__init__.py` files to define packages and subpackages, and separate modules for main application logic, dependencies, and routers.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_0

LANGUAGE: text
CODE:
```
.
├── app
│   ├── __init__.py
│   ├── main.py
│   ├── dependencies.py
│   └── routers
│   │   ├── __init__.py
│   │   ├── items.py
│   │   └── users.py
│   └── internal
│       ├── __init__.py
│       └── admin.py
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This code snippet demonstrates how to create an asynchronous FastAPI application using `async def` for the route functions. This is useful when dealing with I/O-bound operations. It includes two GET endpoints: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' endpoint includes a path parameter 'item_id' and an optional query parameter 'q'.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/nl/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Python Absolute Import: Importing APIRouters
DESCRIPTION: Demonstrates an alternative absolute import method for bringing APIRouter instances from submodules into the main application. This approach uses the full package path, app.routers, to specify the module location.
SOURCE: https://github.com/fastapi/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#_snippet_15

LANGUAGE: Python
CODE:
```
from app.routers import items, users
```